#+TITLE: Scrapyroo
#+AUTHOR: Dima Gerasimov
#+EMAIL: karlicoss@gmail.com
# #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_ROOT: ./reveal.js-3.8.0
# #+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/
#+REVEAL_EXTRA_CSS: ./style-reveal.css
#+HTML_HEAD_EXTRA: <style>.NOTES {background-color: lightgray;}</style>
# #+REVEAL_TRANS: linear
#+REVEAL_SLIDE_FOOTER:  <div class='title'>Scrapy<font color='#b7410e'>r</font><font color='#00ccbc'>oo</font></div>
#+REVEAL_TITLE_SLIDE:    <h1 class='title'>Scrapy<font color='#b7410e'>r</font><font color='#00ccbc'>oo</font></h1>
#+REVEAL_TITLE_SLIDE: <h2 class='author'>%a</h2>
#+REVEAL_HEAD_PREAMBLE: <script src='hack-footer.js'></script>
# TODO wtf it looks a bit blurry in Firefox.. don't think font is the issue
#+REVEAL_HEAD_PREAMBLE: <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro' rel='stylesheet' type='text/css'>
# #+OPTIONS: reveal_single_file:t

#+OPTIONS: toc:nil

#+BEGIN_NOTES
These are my slides + speaker notes from [[https://www.meetup.com/Rust-London-User-Group/events/266262531][November Rust London User Group meetup]]. 
Huge thanks to [[https://twitter.com/ernestkissiedu][Ernest]] for organising!

Presentation is done in org-reveal and source is available [[https://github.com/karlicoss/scrapyroo-slides][here]].
#+END_NOTES

#+BEGIN_NOTES
Hi, I'm Dima and today I'm gonna tell you about [[https://github.com/karlicoss/scrapyroo][Scrapyroo]], which is a tool I built to search over Deliveroo menus and make my life a bit easier.

Also just to make clear: I'm not employed by Deliveroo!
So it's not like I'm just pitching you the feature I implemented on my day job :P
#+END_NOTES

* Past Rust experience
Virtually none apart from some Project Euler.

#+BEGIN_NOTES
This time I also got away with not writing much of new Rust code.
Which is a good thing! Library I'm going to tell you about does deals with most of complicated and tendious stuff.

But this is my first proper interaction with the Rust ecosystem.

I am comfortable with many different other programming languages though and have been following Rust news, so havent struggled with the languages specifically.
#+END_NOTES


* Deliveroo is great!
  
I can't imagine ordering food without a service like this.

#+BEGIN_NOTES
Not sure if there are any Deliveroo employees here, but I want to thank you for a great product!

As a millennial/someone born in mid 90s, I am imagining life before services like Deliveroo and Uber as some sort of dark ages.

My older friends told me some dreadful stories. Apparently you'd browse through paper menus, have to phone call the operator and coordinate the courier?

Brrr.. I'm lucky to live now.
#+END_NOTES

* The problem 
No full-text menu search :(

It's ok for getting *something* to eat, but not great when you know what you want to order.

** You can't find specific food!

- craving things
- varying your diet
- accommodating multiple people's prefs at the same time
   
#+BEGIN_NOTES
Why would you want this?

- Craving: e.g. if you want to treat yourself with some dessert, better get something you'd *really* enjoy instead of mediocre one because that's what the restaurant offered.
- Varying: I'm trying to expose myself to all kinds of food to make sure I'm not missing on some important nutrients.
- Multiple people: you and your friends want different things and you need to choose a single restaurant to order from.
#+END_NOTES

** 
[[file:pic/categories.png]]

#+BEGIN_NOTES
Just to demonstrate what I'm talking about, here's the Deliveroo web interface (mobile looks similar).

You can filter by dietary restrictions, fair enough, but then finest you can do is to pick "Categories".

Some of them kinda make sense (e.g. "Bagels"), some of them are too broad (e.g. what is "Asian/American"? could be anything).
Some of them are just plain weird, like what is "Back to school" supposed to mean?

This is the best you're gonna get from Deliveroo.
#+END_NOTES

** 

[[file:pic/tabs.png]]

#+BEGIN_NOTES
 Say, you want some grilled tuna and green vegetables. 
 
 Best you can do is open all 15 places that serve fish in different tabs,
 Ctrl-F tuna and then try to decide among them.
#+END_NOTES

** Sad!
Full text search is a basic human right!     

#+BEGIN_NOTES
I asked people and that's apparently what they accept and never even questioned!  

It feels especially wrong to me because human brains are good at creativity.
Not so good at stuff like text search -- that's one of things computers are *exceptionally* good at and we're ought to exploit that.
#+END_NOTES  

* What can we do?
  
# TODO add diagram here?
- scrape menu data off Deliveroo website
  #+BEGIN_NOTES
  e.g. every day at 10 AM
  
  About 600 restaurants deliver to my postcode.
  
  Results in huge json file.
  #+END_NOTES
- index menu data
  #+BEGIN_NOTES
  Indexing needed mostly because I want

  - search operators
  - stemming, e.g. removing inflection, so there's no difference, between 'grill and grilled'
  #+END_NOTES
- backend to serve indexed data 
- frontend to search in the data

** Scraping menus
Python ([[https://github.com/scrapy/scrapy][scrapy]]). Almost no need for HTML parsing!

[[file:pic/json.png]]

#+BEGIN_NOTES
To try it for yourself, go to some restaurant, e.g.
https://deliveroo.co.uk/menu/london/spitalfields/tokyo-sushi-finsbury-park
open chrome inspector and type ~{"~ .  ~js-react-on-rails-context~ should be among the results.

If there are any Deliveroo developers here, sorry for public dissection of your website!
#+END_NOTES

** Scraping menus
   
#+BEGIN_SRC json
  {
    "urls": ["/menu/london/liverpool-street/pub-classics-from-greene-king-bishopsgate"],
    "delivery_location": { "address": [ -0.0623, 51.123 ]},
    "id": 189155,
    "name": "Pub Classics from Greene King - Kings Arms",
    "description": "Bringing the pub to your door",
    "uname": "pub-classics-from-greene-king-bishopsgate",
    "menu": {"items": [
       {
           "id": 31299189,
           "name": "Chickpea, Red Pepper & Hoisin Burger (VE)",
           "description": "Chickpea and mixed vegetable burger",
           "price": "\u00a310.79"
       },
       {
           "id": 31085809,
           "name": "Fish & Chips with Wine for 2",
           "description": "2 x cod with chips and a bottle of wine\r\n",
           "price": "\u00a338.99"
       }
    ]}
  }
#+END_SRC

#+BEGIN_NOTES
We get something like that (I've filtered out irrelevant stuff) for each restaurant.

Scraped json data is kept separately to checkpoint in case scraping/indexing fails.
#+END_NOTES

** Indexing menus & serving data

[[https://github.com/tantivy-search/tantivy][Tantivy]]!   

#+BEGIN_NOTES
I'm going to be explaining why it works well later in the presentation.
#+END_NOTES

** Frontend
HTML and some Javascript/React

* Scrapyroo
  
(Live demo). You can try it here: [[https://scrapyroo.karlicoss.xyz][scrapyroo.karlicoss.xyz]]

#+BEGIN_NOTES
Note that this only indexes my district (Whitechapel).
Also not sure for how long I'll expose it, but I'll make a demo video before shutting it down.

Also there is a screenshot in [[https://github.com/karlicoss/scrapyroo][readme]].
#+END_NOTES

** Features
   
- search queries
  #+BEGIN_NOTES
  demo: say you want some halloumi and green vegetables.
  
  Type: 'halloumi AND vegetables'. Whoa, vegetable smoothie in results? No, thank you.
  So we can use phrase query (quotes) and exlusive query (-): add 'AND -"vegetable smoothie"'. Ah, that's better now!
  
  Say you also want some desert. add 'AND cheesecake' or 'AND "ice cream"'. Nice, few places acrually serve this combination!
  #+END_NOTES
  
  #+BEGIN_NOTES
  Or you're ordering with two other friends. 

  One you want prawns, another one chicken salad, and the third wants some feta.
  
  'prawns AND "chicken salad" AND "feta"' -- and we instantly find few matches!
  
  Without full text search there is no way you would ever find it.
  #+END_NOTES
- search as you type
  #+BEGIN_NOTES
  At the moment requests index on almost every keystroke, would be nice to keep a persistent connection,
  although that's something that is hard to implement in a generic way.
  
  Demonstrate in dev tools
  #+END_NOTES
- works from phone as well as desktop browser

#+BEGIN_NOTES
- show debug mode? maybe later if I got a bit more time
- ui perhaps is a bit rough
#+END_NOTES

** TODOs :noexport:
*** TODO [#A] make sure it runs on my laptop!!! 
    SCHEDULED: <2019-11-16 Sat>

* Why Tantivy?

- initial [[https://lunrjs.com][lunrjs]] implementation was visibly laggy even on desktop
  #+BEGIN_NOTES
  Need to carry data inside the huge html -- not that great.
  
  You need internet anyway to make an order, so I didn't mind having a proper backend.
  #+END_NOTES

- also, why not?

  #+BEGIN_NOTES
  Wanted to try out Rust for some real project.

  Never used any other search engine libraries and was recommended Tantivy.
  #+END_NOTES

* Tantivy: good

Features:
- [[https://docs.rs/tantivy/0.10.3/tantivy/struct.Snippet.html][highlight positions]], snippets
  #+BEGIN_NOTES
  alt-tab to the presentation and show what I mean by snippets?

  Without the snippets: pretty sad. 
  
  Demonstrate lack of snippets:
  - disable highlights in chrome inspector
  - tick 'show unmatched'
  - untick 'show matched first'
  #+END_NOTES
- [[https://docs.rs/tantivy/0.10.3/tantivy/struct.IndexWriter.html][transactional]] index updates
  #+BEGIN_NOTES
  add/delete/rollback/commit
  #+END_NOTES
- [[https://docs.rs/tantivy/0.10.3/tantivy/enum.ReloadPolicy.html][autoreloading]] latest commit in searchers 
  #+BEGIN_NOTES
  
  Caveat: have to be careful when deploying index remotely, ~meta.json~ file has to be deployed *last*!

  I'm in progress of writing up a github issue, will put the link here.  
  #+END_NOTES
- [[https://github.com/tantivy-search/tantivy-py][Python bindings]]
- well documented, easy to modify
  
  #+BEGIN_NOTES
  Mention [[https://tantivy-search.github.io/tantivy/tantivy/schema/struct.Facet.html][facets]]? 
  #+END_NOTES

** TODO implement facets?                                          :noexport:

** Tantivy CLI: awesome
Takes you from zero to prototype in a matter of *minutes* without distracting on irrelevant stuff.

#+BEGIN_SRC bash
  tantivy-cli new    -i your_index  # interactive!
  tantivy-cli index  -i your_index < data.jsonl
  tantivy-cli serve  -i your_index # http interface
  tantivy-cli search -i your_index -q "spinach AND paneer" # cli queries
#+END_SRC
 

  #+BEGIN_NOTES
  And I'm not exaggerating about minutes!
  You can index data and expose it to your frontend without a singe line of code.
  
  I spent most time on scraping and frontend.
  #+END_NOTES

* Tantivy: bad
# TODO instead of 'bad': use smth different?  

- no nested document support ([[https://github.com/tantivy-search/tantivy/issues/617][yet]])
   
  - would be nice to have queries like =starter:dumpling AND main:salad=
  - potentially less resource wasteful
  #+BEGIN_NOTES
  You can't return matched menu items only, have to index and serve the whole menu.
  
  It's not too bad though, I'm getting around this by relying on line breaks to only display matched items.
  #+END_NOTES

* Enhancing Tantivy
Rust observations:
- single binary: very easy to deploy
 
  #+BEGIN_SRC bash
  cargo install tantivy-cli --root /Dropbox/soft/tantivy-cli
  #+END_SRC
 
  #+BEGIN_NOTES
  Especially on VPS, which only (huh!) got two cores and wouldn't handle compiling Rust well
  #+END_NOTES
- [[https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html][~musl~]]: minimal libc implementation
  
  #+BEGIN_SRC bash
  apt install musl-tools 
  rustup target add x86_64-unknown-linux-musl
  cargo build/install --target x86_64-unknown-linux-musl
  #+END_SRC
  
  #+BEGIN_NOTES
  Turned out my desktop and my VPS where I wanted to run the backend use different libc version.

  Normally that would mean crosscompiling and all the associated horror.
  
  With Rust it turned out to be a matter of adding a target via rustup and that's it!
  #+END_NOTES

- [[https://doc.rust-lang.org/rust-by-example/trait/derive.html][derive]] debug/serialize

  #+BEGIN_NOTES
  First seen in Haskell!
 
  Python: kind of there via NamedTuples/dataclasses
  
  I often miss it in C++!
  You can implement it with templates, macros or ~boost::preprocessor~ depending on how much you hate yourself/your team :P
  But it's a very reasonable default feature to have.
  #+END_NOTES

** 

Cargo: *very* easy to change dependency to local
  #+BEGIN_SRC
  tantivy-cli/Cargo.toml:
  - tantivy = "0.10"
  + tantivy = { path = "/coding/tantivy" }
  #+END_SRC
  
  #+BEGIN_NOTES
  I managed to run this with the minimal effort.

  There is tantivy, tantivy-cli and tantivy-py.
  I was experimenting with exposing this snippet API from tantivy so needed to change dependency.
  
  To be fair, not too bad in pip:
  
  ~pip3 install --user 'git+https://github.com/karlicoss/tantivy-py@delete-all-documents'~
  
  However, not discoverable via ~--help~, you have to know what to look for!

  #+END_NOTES

  - or, github: 

    #+BEGIN_SRC bash
    cargo install  \
    --git https://github.com/karlicoss/tantivy-cli \
    --branch serve-snippets
    #+END_SRC

    #+BEGIN_NOTES
    I had to patch tantivy a bit, and it would take me a bit of time to get PRs accepted to upstream.
    
    You can try it as easy as you would 
    #+END_NOTES

** 
[[https://github.com/tantivy-search/tantivy-py][tantivy-py]]: surprisingly simple integration
  
  - just ~pip install~ thanks to [[https://github.com/PyO3/setuptools-rust][=setuptools-rust=]].
    #+BEGIN_NOTES
    Benefits from existing Rust ecosystem: e.g. can run ~cargo build~, etc. You just write normal Rust code.
    #+END_NOTES  
  - easy to interface
    #+BEGIN_SRC rust
    fn delete_all_documents(&mut self) -> PyResult<u64> {
      self.inner_index_writer.delete_all_documents().map_err(to_pyerr)
    }
    #+END_SRC
     
    Powered by [[https://github.com/PyO3/pyo3#using-rust-from-python][PyO3]].

* Contributions back  
#+BEGIN_NOTES
I figured Tantivy could benefit from some things I implemented.
#+END_NOTES

Pull requests in progress:

- exposing absolute highlight positions

  #+BEGIN_NOTES
  [[https://docs.rs/tantivy/0.10.2/tantivy/struct.Snippet.html#method.to_html][~to_html~]] isn't gonna work well, you'll want to restyle it.
  #+END_NOTES  

- React boilerplate to interact with CLI backend

  #+BEGIN_NOTES
  Most of my time was spent on getting around frontend quirks, so that would make prototyping even easier.
  #+END_NOTES
  

* Outtakes  
- rust & tantivy

  Very pleasant experience, no frustration
  
- my life is simpler now!
  
  I don't have to waste time browsing through the website
- discovered places I'd have never found otherwise
- you don't have to suffer from inconvenience in your life   

  #+BEGIN_NOTES
  If you can program, you are literally capable of anything you can think of (well, given enough time :P).

  You can bend the interactions with the outside world the way you want.
  #+END_NOTES  

* Credits
  
- [[https://github.com/petr-tik][github.com/petr-tik]]
#+BEGIN_NOTES
Petr pushed me to actually give a talk, helped with Tantivy and gave me lots of helpful advice on improving the presentation. Thank you!

He's passionate about Tantivy and will be happy to help you if you think something is missing or can be improved.
#+END_NOTES

* Thanks!
  :PROPERTIES:
  :CUSTOM_ID: fin
  :END:
  
#+BEGIN_NOTES
Questions?  
#+END_NOTES

- [[https://github.com/karlicoss/scrapyroo][github.com/karlicoss/scrapyroo]]
- [[https://beepb00p.xyz/scrapyroo.html][beepb00p.xyz/scrapyroo.html]]: speaker notes!
  #+BEGIN_NOTES
  The presentation will be available as plain text (as well as my notes), so hopefully you won't miss anything.
  #+END_NOTES


Tantivy: 
- [[https://github.com/tantivy-search][github.com/tantivy-search]]
- [[https://gitter.im/tantivy-search/tantivy][gitter.im/tantivy-search/tantivy]]
- [[https://docs.rs/tantivy][docs.rs/tantivy]]
 
Me:
- 💻 [[https://github.com/karlicoss][github.com/karlicoss]]
- 🐦 [[https://twitter.com/karlicoss][twitter.com/karlicoss]]
  
* Appendix: Tantivy details
** how are scores calculated?
  
  See [[https://docs.rs/tantivy/0.10.3/tantivy/query/struct.Explanation.html][~Explanation~]]. Basically builds a computation tree for a given match.
  
  Demonstrate [[https://docs.rs/tantivy/0.10.3/tantivy/query/trait.Query.html#method.explain][~explain~]] in logs?

  'pretty' json is a little rough at the moment.
  
** how are snippets selected?

  Somewhat heuristic, see [[https://github.com/tantivy-search/tantivy/blob/42756c7474317c2b1aa0610278b54c0bb0c70fb9/src/snippet/mod.rs#L144][~search_fragment~]]

  #+BEGIN_QUOTE
  The returned list is non-empty and contain less than 12 possibly overlapping fragments.
  
  It is ok to emit non-overlapping fragments, for instance, one short and one long containing the same keyword, in order
  to leave optimization opportunity to the fragment selector upstream.
  #+END_QUOTE

* Appendix: random Rust things

** Unicode handling
  
  didn't have time to figure it out, so I just stripped all non-ascii
** [[https://github.com/serde-rs/serde][serde]] and ~#[derive(Serialize)]~
  
  ran into [[https://serde.rs/remote-derive.html][orphan rule]]

** binary size:

  #+BEGIN_SRC
  /coding/tantivy-cli/target $ du -hd1
  2.2G	./x86_64-unknown-linux-musl
  2.2G	./debug
  1.5G	./release
  5.8G	.
  #+END_SRC
  
  Not very cloud sync-friendly! However happily accepts symlink as ~target~ directory, so not too bad.

* TODO  reveal help :noexport:
- https://github.com/yjwen/org-reveal
- http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html
- http://jr0cket.co.uk/2017/03/org-mode-driven-presentations-with-org-reveal-spacemacs.html
** TODO https://github.com/yjwen/org-reveal/issues/121
    +OPTIONS: reveal_single_file:t ?

* TODO x                                                           :noexport:
** TODO speaker notes
*** Heading 1
     Some contents.
  #+BEGIN_NOTES
    Enter speaker notes here.
  #+END_NOTES

  To skip exporting speaker notes, please set variable `org-reveal-ignore-speaker-notes` to `t`.

** TODO [2019-11-15 Fri 22:43] hmm nice could just publish my presentation with notes as a post?
** TODO [#D] very easy to use local dependency (just point to direcory) when I wanted to hack tantivy :rust:scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-10-13 Sun 23:30]
   :END:

** STRT [#B] notes and log                                        :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-10 Sun 16:17]
   :END:
 :LOGBOOK:
 - State "STRT"       from              [2019-11-10 Sun 20:17]
 :END:

 Weird, snippets return single word highlights even for phrase searches: e.g. "duck soup"

 interesting feature could be breaking down query (e.g. "Duck Soup" OR "Duck Salad" but maybe it's overkill
*** [2019-11-10 Sun 20:17] mm, first attempt was just 
 TODO perhaps split by endlines?
 maybe what I want it hierarchical documents (or what's it called??)
*** [2019-11-10 Sun 22:06] right, apparently default stemming in tantivy is en_ already?
**** [2019-11-10 Sun 22:06] could add to caveats or something?
*** [2019-11-10 Sun 22:48] very nice thing about tantivy is that you can have a fully functional (perhaps even production grade!) search backend in a matter of minutes
 with a simple python script or even some jq 
 easy to debug via httpie/whatever?
*** TODO [2019-11-10 Sun 23:06] would be also nice to add a simple react search thing for easy kickoff?
*** TODO [2019-11-10 Sun 23:02] handle that fish AND salad -"fish cake"
*** TODO [2019-11-10 Sun 23:13] example: fish AND salad -- demonstrate k
*** TODO [2019-11-10 Sun 23:17] demonstrate how fast it is by doing incremental search in react
**** [2019-11-10 Sun 23:17] could also use some rust profiling tools for that and quick calculation; compute some latency
*** TODO [2019-11-10 Sun 23:18] scrape a bigger chunk 
*** TODO [2019-11-10 Sun 23:21] how to refresh index? I guess need to do it in a single transaction
*** TODO [2019-11-11 Mon 00:11] my VPS is running bionic and I was getting ./tantivy-cli: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by ./tantivy-cli
    cross compiling? or musl?
   
    whoops?
    /L/coding/tantivy-cli  ↵ SIGINT(2)  cargo build --target x86_64-unknown-linux-musl
    Compiling log v0.4.7
    Compiling matches v0.1.8
    Compiling cfg-if v0.1.9
    Compiling autocfg v0.1.5
    Compiling smallvec v0.6.10
    Compiling libc v0.2.60
    Compiling proc-macro2 v0.4.30
    Compiling version_check v0.1.5
    error[E0463]: can't find crate for `core`
   = note: the `x86_64-unknown-linux-musl` target may not be installed

   rustup target add x86_64-unknown-linux-musl && sudo apt install musl-tools
   and it works!
  
 honestly I find it hard appreciate because it's something that was ought to be there in the first place! But rust somehow managed to get it all right
*** TODO [2019-11-11 Mon 00:32] demonstrace -rice or something?
*** TODO [2019-11-11 Mon 00:32] I guess ideally you want to have an operator that works like AND but matches against separate menu items. I'm not sure if it's really possible to achieve..
*** TODO [2019-11-11 Mon 00:33] with wasm, could be fucking awesome if it could suck in jsons once from the backend and then you wouldn't need to do extra queries
*** TODO [2019-11-11 Mon 00:36] ugh
 A selection of tandoori chicken, chicken tikka, Iamb tikka, sheek kebab, tandoori king prawn served with green salad12.
 then baked in the clay oven and wrapped with naan bread. Served with <span class='highlight'>salad</span><sup class='snippet snippet_13 nodebug'>13</sup> and red sauce.	undefined
 undefined
 <span class='highlight'>salad</span><sup class='snippet snippet_14 nodebug'>14</sup> and mint sauce.

** TODO would be nice to have a JS query verifier?                :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-11 Mon 23:09]
   :END:

** TODO hmm, tell about python bindings and debug method?         :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-14 Thu 18:50]
   :END:
*** [2019-11-14 Thu 18:52] I guess demonstrate specific snippets along with imports?

    
** TODO motivation: I'm not sure how the categories are curated, but I found them not to correspond to the menus :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-14 Thu 19:19]
   :END:

 e.g. looking for sardines
 https://deliveroo.co.uk/menu/london/bethnal-green/laxeiro-tapas-bar-ltd

** TODO motivation: mussels AND cheesecake                        :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-14 Thu 19:24]
   :END:
** TODO Fish and cheesecake. Weird combo, but I don't flollow made up society rules :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-12 Tue 09:35]
   :END:
** TODO It is ok to employ someone to search for you, but not too implement the search yourself? I'd say the former feels wrong :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-12 Tue 09:44]
   :END:

** TODO Tantivy could even have static html in addition to serve API? :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-12 Tue 00:37]
   :END:
** TODO ugh. it's unclear how to hide a subtree???

* TODO Ispell                                                      :noexport:

 
* older todos :noexport:
** TODO [#A] chicken AND -"chicken wings"                         :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-16 Sat 17:56]
   :END:
** TODO [#A] chicken AND -wings                                   :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-16 Sat 18:01]
   :END:
** TODO [#A] good query: "salmon sushi" AND miso AND "ice cream"  :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-19 Tue 00:32]
   :END:
** TODO [#A] demo "chicken sashimi"                               :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-19 Tue 00:38]
   :END:
** TODO [#A] -"vegetable oil" is a good example?                  :scrapyroo:
   :PROPERTIES:
   :CREATED:  [2019-11-19 Tue 00:43]
   :END:
